
<%
  def discover_external_ip
    networks = spec.networks.marshal_dump

    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end

    if !network
      _, network = networks.first
    end

    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end

    network.ip
  end

  def node_name
    "#{name.gsub('_', '-')}-#{spec.index}"
  end

  def peer_protocol
    p("etcd.peer_require_ssl") ? "https" : "http"
  end

  def client_protocol
    p("etcd.require_ssl") ? "https" : "http"
  end

  def advertise_peer_url
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      "#{peer_protocol}://#{node_name}.#{p("etcd.advertise_urls_dns_suffix")}:7001"
    else
      my_ip = discover_external_ip
      "http://#{my_ip}:7001"
    end
  end

  def advertise_client_url
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      "#{client_protocol}://#{node_name}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
    else
      my_ip = discover_external_ip
      "http://#{my_ip}:4001"
    end
  end

  def cluster_member_ips
    ips = nil
    if_p("etcd.machines") { |machines| ips = machines.map { |m| "http://#{m}:4001" } }
    unless ips
      ips = link("etcd").instances.map { |i| "http://#{i.address}:4001" }
    end
    ips
  end

  def cluster_members
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      cluster_url = "#{client_protocol}://#{p("etcd.advertise_urls_dns_suffix")}:4001"
      return cluster_url
    else
      cluster_member_ips.join(" ")
    end
  end

  def consistency_checker_cluster_members
    if p("etcd.require_ssl") || p("etcd.peer_require_ssl")
      cluster_member_urls = nil
      if_link("etcd") do |etcd_link|
        urls = []
        etcd_link.instances.size.times do |i|
          urls << "#{client_protocol}://#{name.gsub('_', '-')}-#{i}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
        end
        cluster_member_urls = urls.flatten.join(",")
      end
      unless cluster_member_urls
        cluster_member_urls = p("etcd.cluster").map do |zone|
          result = []
          for i in 0..zone["instances"]-1
            result << "#{client_protocol}://#{zone["name"].gsub('_', '-')}-#{i}.#{p("etcd.advertise_urls_dns_suffix")}:4001"
          end
          result
        end.flatten.join(",")
      end
      return cluster_member_urls
    else
      cluster_member_ips.flatten.join(",")
    end
  end
%>

