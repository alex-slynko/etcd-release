package main

import (
	"flag"
	"log"
	"os"
	"time"

	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/application"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/client"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/cluster"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/command"
	"github.com/cloudfoundry-incubator/etcd-release/src/etcdfab/sync"

	"code.cloudfoundry.org/lager"
)

const (
	stop  = "stop"
	start = "start"
)

type etcdfabFlags struct {
	Command            string
	ConfigFilePath     string
	LinkConfigFilePath string
}

func main() {
	flags := parseFlags()

	logger := lager.NewLogger("etcdfab")
	logger.RegisterSink(lager.NewWriterSink(os.Stdout, lager.INFO))

	commandWrapper := command.NewWrapper()
	etcdClient := client.NewEtcdClient(logger)
	clusterController := cluster.NewController(etcdClient, logger, time.Sleep)
	syncController := sync.NewController(etcdClient, time.Sleep)

	app := application.New(application.NewArgs{
		Command:            commandWrapper,
		ConfigFilePath:     flags.ConfigFilePath,
		LinkConfigFilePath: flags.LinkConfigFilePath,
		EtcdClient:         etcdClient,
		ClusterController:  clusterController,
		SyncController:     syncController,
		OutWriter:          os.Stdout,
		ErrWriter:          os.Stderr,
		Logger:             logger,
	})

	if flags.Command == STOP {
		// err := app.Stop()
		// if err != nil {
		// 	stderr := log.New(os.Stderr, "", 0)
		// 	stderr.Printf("error during start: %s", err)
		// 	os.Exit(1)
		// }
	}

	err := app.Start()
	if err != nil {
		stderr := log.New(os.Stderr, "", 0)
		stderr.Printf("error during start: %s", err)
		os.Exit(1)
	}
}

func parseFlags() etcdfabFlags {
	var flags etcdfabFlags
	flagSet := flag.NewFlagSet("flags", flag.ContinueOnError)
	flagSet.StringVar(&flags.ConfigFilePath, "config-file", "", "Path to the etcdfab config file. Generated by the etcd-release using BOSH deployment manifest properties.")
	flagSet.StringVar(&flags.LinkConfigFilePath, "config-link-file", "", "path to the etcdfab link config file. This will override any properties with bosh links.")

	if len(os.Args) < 3 {
		flagSet.Usage()
		os.Exit(1)
	}

	cmd := os.Args[1]
	if cmd != START && cmd != STOP {
		os.Exit(1)
	}
	flags.Command = cmd

	if err := flagSet.Parse(os.Args[2:]); err != nil {
		os.Exit(1)
	}

	return flags
}
