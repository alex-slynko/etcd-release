#!/bin/bash -eux

etcd_release_version="99999+dev.$(date +%s)"
warden_cpi_version="29"
turbulence_version="0.4"

function check_dependencies() {
  test -n "${EATS_CONFIG?"EATS_CONFIG is a required environment variable"}"

  require bosh
  require jq
  require go
  require wget
}

function require() {
  local dependency
  dependency="${1}"

  if [[ -z "$(which "${dependency}")" ]]; then
    echo "This test runner requires '${dependency}'"
    exit 1
  fi
}

function main() {
  parse_config

  local scripts_dir
  scripts_dir=$(cd "$(dirname "${0}")" && pwd)

  upload_releases "${scripts_dir}"
  bash -c "${scripts_dir}/../src/acceptance-tests/scripts/test $@"
}

function parse_config() {
  set +x
  export BOSH_DIRECTOR=$(jq --raw-output '.bosh.target' "${EATS_CONFIG}")
  export BOSH_USER=$(jq --raw-output '.bosh.username' "${EATS_CONFIG}")
  export BOSH_PASSWORD=$(jq --raw-output '.bosh.password' "${EATS_CONFIG}")
  set -x
}

function upload_releases() {
  local scripts_dir
  scripts_dir="${1}"

  pushd "${scripts_dir}/.." > /dev/null
    bosh -t "${BOSH_DIRECTOR}" create release --force --version "${etcd_release_version}"
    bosh -t "${BOSH_DIRECTOR}" upload release
  popd > /dev/null

  local releases_dir
  releases_dir="/tmp/eats/releases"
  mkdir -p "${releases_dir}"

  upload_release "${releases_dir}/bosh-warden-cpi-release.tgz" "http://bosh.io/d/github.com/cppforlife/bosh-warden-cpi-release?v=${warden_cpi_version}"
  upload_release "${releases_dir}/consul-release.tgz" "http://bosh.io/d/github.com/cloudfoundry-incubator/consul-release"
  upload_release "${releases_dir}/turbulence-release.tgz" "http://bosh.io/d/github.com/cppforlife/turbulence-release?v=${turbulence_version}"
}

function upload_release() {
  local local_release_path
  local_release_path="${1}"

  local release_url
  release_url="${2}"

  if [[ ! -e "${local_release_path}" ]]; then
    wget -O "${local_release_path}" "${release_url}"
  fi
  bosh -t ${BOSH_DIRECTOR} upload release "${local_release_path}" --skip-if-exists
}

function cleanup_releases() {
  set +e
  bosh -t "${BOSH_DIRECTOR}" -n delete release turbulence "${turbulence_version}"
  bosh -t "${BOSH_DIRECTOR}" -n delete release bosh-warden-cpi "${warden_cpi_version}"
  bosh -t "${BOSH_DIRECTOR}" -n delete release consul
  bosh -t "${BOSH_DIRECTOR}" -n delete release etcd "${etcd_release_version}"
  set -e
}

check_dependencies
trap cleanup_releases EXIT
main "$@"
